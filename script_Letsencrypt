:local sServer "10.10.10.111"
:local sLogin  "mikrotik"
:local sPath   "/etc/mikrotik/certs/"
:local sHost   "*"
:local sDomain "acme.com"
:local sMailTo "execdevnull@acme.com"


:local sIdentity [/system identity get name]
:local sCN       "$sHost.$sDomain"


# Import script containing external function that calculates number of days
:local fnDateToDays [:parse [/system script get fn_date_to_days source]]


:log warn ("Certificate update for " . $sCN . " starting") 


# Delete leftovers
:if ([/file find name="$sDomain.crt"] != "") do={
    /file remove "$sDomain.crt"
}

:if ([/file find name="$sDomain.key"] != "") do={
    /file remove "$sDomain.key"
}


# Fetch certificate and key from server
/tool fetch url="sftp://$sServer/$sPath/$sDomain.crt" user=$sLogin dst-path="$sDomain.crt"
/tool fetch url="sftp://$sServer/$sPath/$sDomain.key" user=$sLogin dst-path="$sDomain.key"

:delay 1s

# Import if fetch was successful
:if (([/file find name="$sDomain.crt"] != "")  &&  ([/file find name="$sDomain.key"] != "")) do={

    # Get current certificate fingerprint
    :local sFingerNow ""
    :local sFingerNew ""

    :if ([/certificate find where common-name=$sCN]) do={
	:set sFingerNow [/certificate get [/certificate find where common-name=$sCN] fingerprint]
    }


    :log warn ("Replacing certificate for " . $sCN) 
    
    # Delete current certificate
    /certificate remove [find name="$sDomain.crt_0"]
    /certificate remove [find name="$sDomain.crt_1"]

    :delay 1s

    # Import new certificate and key
    /certificate import file-name="$sDomain.crt" passphrase=""
    /certificate import file-name="$sDomain.key" passphrase=""

    :delay 1s

    # Remove files not needed anymore
    /file remove "$sDomain.crt"
    /file remove "$sDomain.key"


    # Compare new fingerprint with old
    :set sFingerNew [/certificate get [/certificate find where common-name=$sCN] fingerprint]
    :if ($sFingerNew != $sFingerNow) do={
	:log warn ("Got new certificate for " . $sCN) 
	:log warn ("Now: " . $sFingerNow)
	:log warn ("New: " . $sFingerNew)

	/tool e-mail send to=$sMailTo subject=($sCN . " certificate updated") body=("Certificate for " . $sCN . " updated at " . $sIdentity . " from sftp://" . $sServer . $sPath . $sDomain)
    }


    # Update services with the new certificate
    :log warn ("Replacing certificate for " . $sCN . " services")

    :local sCertName [/certificate get [/certificate find where common-name=$sCN] name]

    /ip hotspot profile set [find name="server_Test"] ssl-certificate=$sCertName
    /interface sstp-server server set certificate=$sCertName


    :log warn ("Certificate update for " . $sCN . " done")
} else={
    :log error ("Failed to fetch certificate or key for " . $sCN)
    
    /tool e-mail send to=$sMailTo subject=($sIdentity . " certificate problem") body=($sIdentity . " could not fetch certificate for " . $sCN . " from sftp://" . $sServer . $sPath . $sDomain . ". Check that the server is available for login to the '" . $sLogin . "' account and that certificate files are available at " . $sPath . $sDomain)
}


# Compare certificate expire date with todays date, send message if less than twoo weeks remains
:local sDateExpire [:pick [/certificate get [/certificate find where common-name=$sCN] invalid-after] 0 11]
:local sDateToday  [/system clock get date ]
:local iDaysLeft   ([$fnDateToDays sDate=$sDateExpire] - [$fnDateToDays sDate=$sToday])

:if ($iDaysLeft < 14) do={
    :log error ("Certificate for " . $sCN . " expires in " . $iDaysLeft . " days!!!") 

    /tool e-mail send to=$sMailTo subject=($sIdentity . " certificate problem") body=("Certificate for " . $sCN . " expires in " . $iDaysLeft . " day(s) and needs updating. Transfer from sftp://" . $sServer . "/" . $sPath . "/" . $sDomain . " does not result in renewed certificate " . $sDomain.crt_0 . ". Check that certbot on " . $sServer . " is renewing correctly!")
}


:log warn ("Certificate update finished") 
